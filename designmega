Modal'))\n\n        const clearLogger = document.querySelector('.clear-logger')\n\n        const RenovarModal = new bootstrap.Modal(document.querySelector('#RenovarModal'))\n\n        configArea.addEventListener('click', e => showConfigsModal())\n        username.addEventListener('input', e => DtUsername.set(e.target.value))\n        password.addEventListener('input', e => DtPassword.set(e.target.value))\n\t\tuuid.addEventListener('input', e => DtUuid.set(e.target.value))\n        logger.addEventListener('click', e => loggerModal.show())\n\n        startStopVpn.addEventListener('click', (e) => {\n            if (DtGetVpnState.execute() != 'DISCONNECTED') {\n                DtExecuteVpnStop.execute()\n            } else {\n                DtExecuteVpnStart.execute()\n            }\n        })\n        clearLogger.addEventListener('click', () => DtClearLogs.execute())\n\n        RenovarModal._element.addEventListener('shown.bs.modal', () => {\n            const iframe = document.querySelector('#RenovarFrame');\n            if (!iframe.src) {\n                iframe.src = 'https://painel.plenonet.com.br/renovar.php'\n                iframe.addEventListener('load', () => {\n                    mp3Modal._element.querySelector('.spinner').classList.add('d-none')\n                })\n            }\n        })\n        RenovarModal._element.addEventListener('hide.bs.modal', () => {\n            const iframe = document.querySelector('#RenovarFrame');\n            iframe.src = '';\n        })\n\n        Object.defineProperty(String.prototype, 't', {\n            value: function t() {\n                return window?.DtTranslateText?.execute('' + this) ?? '' + this\n            },\n            writable: true,\n            configurable: true,\n        })\n\n        const dtConfigClickListener = () => {\n            const data = JSON.parse(window?.DtGetDefaultConfig?.execute() || `{ \"auth\": {}, \"mode\": \"v2ray\" }`)\n\t\t\tconst isV2ray = data?.mode?.toLowerCase()?.startsWith('v2ray');\n            config.placeholder = data.name ?? 'LBL_CHOOSE_CONFIG'.t()\n            username.parentElement.style.display = !data?.auth?.username && !isV2ray ? 'flex' : 'none';\n            password.parentElement.style.display = !data?.auth?.password && !isV2ray ? 'flex' : 'none';\n\t\t\tuuid.parentElement.style.display = !data?.auth?.v2ray_uuid && isV2ray ? 'flex' : 'none';\n        }\n\n        const dtVpnStateListener = state => {\n            const isRunning = state != 'DISCONNECTED';\n\n            stateStatus.innerHTML = ('LBL_STATE_' + state).t()\n            startStopVpn.innerHTML = isRunning ? 'LBL_BTN_STOP'.t() : 'LBL_BTN_START'.t()\n\n            if (isRunning) {\n                username.setAttribute('readonly', 'true')\n                password.setAttribute('readonly', 'true')\n            } else {\n                username.removeAttribute('readonly')\n                password.removeAttribute('readonly')\n            }\n\n            if (state == 'CONNECTING') dtShowSuccessToastListener('Conectando...')\n        }\n\n        const dtCheckUserStartedListener = () => {\n\t\tconst data = JSON.parse(window?.DtGetDefaultConfig?.execute() || `{}`)\n\t\tconst isV2ray = data?.mode?.toLowerCase()?.startsWith('v2ray');\n            if (isV2ray) return;\n            const html = `\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border p-5\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n            </div>\n            `\n\n            checkUserModal._element.querySelector('.chk-title').textContent = 'CHECK USER'\n            checkUserModal._element.querySelector('.chk-message').innerHTML = html;\n            checkUserModal.show()\n        }\n\n        const dtCheckUserModelListener = model => {\n            const data = JSON.parse(model ?? `{\"username\": \"test\"}`)\n            const html = `\n                <div class=\"d-flex flex-column text-white\">\n                    <span>馃懁Nome de usuario: ${data.username}</span>\n                    <span>馃搯Expira em: ${data.expiration_date}</span>\n                    <span>馃搯Dias restantes: ${data.expiration_days}</span>\n                    <span>馃毇Conexoes: ${data.count_connections}|${data.limit_connections}</span>\n                </div>\n            `\n\n            checkUserModal._element.querySelector('.chk-title').textContent = '馃搯 Ol谩, ' + data.username.toUpperCase() + '馃懁'\n            checkUserModal._element.querySelector('.chk-message').innerHTML = html;\n            checkUserModal.show()\n        }\n\n        const dtMessageErrorListener = message => {\n            const data = JSON.parse(message)\n            errorModal._element.querySelector('.err-title').textContent = data.title;\n            errorModal._element.querySelector('.err-message').innerHTML = data.content;\n            errorModal.show()\n        }\n\n        const dtOnNewLogListener = () => {\n            const mock = [];\n            for (let i = 0; i < 30; i++) {\n                mock.push({ 'TIME': 'MESSAGE ' + i })\n            }\n\n            const log = window?.DtGetLogs?.execute() || JSON.stringify(mock)\n            const data = JSON.parse(log)\n\n            let content = '';\n            data.forEach(item => {\n                content += '<li class=\"list-group-item fs-6 bg-transparent text-white p-0 border-0 text-start ms-2 text-wrap\">';\n                content += Object.keys(item)[0] + \" \" + item[Object.keys(item)]\n                content += '</li>';\n            })\n\n            loggerModal._element.querySelector('.logger-content').innerHTML = content;\n            const listGroup = loggerModal._element.querySelector('.list-group')\n            listGroup.scrollTo(0, listGroup.scrollHeight)\n        }\n\n        const dtVpnStartedSuccessListener = () => dtShowSuccessToastListener('Conectado com sucesso')\n\n        const dtVpnStoppedSuccessListener = () => dtShowSuccessToastListener('Desconectado com sucesso')\n\n        const dtShowSuccessToastListener = text => {\n            Toastify({\n                text: text,\n                close: true,\n                style: {\n                    background: 'linear-gradient(to right, #00b09b, #96c93d)',\n                    marginTop: '35px',\n                }\n            }).showToast()\n        }\n\n        const dtShowErrorToastListener = text => {\n            Toastify({\n                text: text,\n                close: true,\n                style: {\n                    background: 'linear-gradient(to right, #ff5c33, #e69900)',\n                    marginTop: '35px',\n                }\n            }).showToast()\n        }\n\n        const showConfigsModal = () => {\n\t\t\tconst mock = '[{\"sorter\":6,\"color\":\"#6D08041C\",\"name\":\"CONFIG\",\"id\":1393,\"items\":[{\"mode\":\"V2RAY - VLESS\",\"sorter\":4,\"tlsVersion\":\"TLSv1.2\",\"name\":\"CONFIG 01\",\"icon\":\"https://cdn-icons-png.flaticon.com/512/8187/8187143.png\",\"id\":11803,\"status\":\"ACTIVE\"},{\"mode\":\"SSH_DIRECT\",\"sorter\":2,\"tlsVersion\":\"TLSv1.2\",\"name\":\"CONFIG 02\",\"icon\":\"https://cdn-icons-png.flaticon.com/512/8187/8187143.png\",\"id\":28627,\"status\":\"ACTIVE\"},{\"mode\":\"OVPN_PROXY\",\"sorter\":23,\"tlsVersion\":\"TLSv1.2\",\"name\":\"CONFIG 03\",\"icon\":\"https://cdn-icons-png.flaticon.com/512/8187/8187143.png\",\"id\":30001,\"status\":\"ACTIVE\"}]},{\"sorter\":2,\"color\":\"#6D08041C\",\"name\":\"CONFIG 2\",\"id\":1846,\"items\":[{\"mode\":\"SSH_PROXY\",\"sorter\":1,\"tlsVersion\":\"TLSv1.2\",\"name\":\"CONFIG 01\",\"icon\":\"https://cdn-icons-png.flaticon.com/512/8187/8187143.png\",\"id\":26295,\"status\":\"ACTIVE\"}]},{\"sorter\":4,\"color\":\"#80000000\",\"name\":\"CONFIG 3\",\"id\":3310,\"items\":[{\"mode\":\"SSH_PROXY\",\"sorter\":1,\"tlsVersion\":\"TLSv1.2\",\"name\":\"CONFIG. TEST\",\"icon\":\"https://cdn-icons-png.flaticon.com/512/8187/8187143.png\",\"id\":29997,\"status\":\"ACTIVE\"},{\"mode\":\"OVPN_PROXY\",\"sorter\":1,\"tlsVersion\":\"TLSv1.2\",\"name\":\"CONFIG. TEST 2\",\"icon\":\"https://cdn-icons-png.flaticon.com/512/8187/8187143.png\",\"id\":29998,\"status\":\"ACTIVE\"}]}]' \n\t\t\tconst data = JSON.parse(window?.DtGetConfigs?.execute() || mock)\n\n            data.sort((a, b) => a.sorter - b.sorter)\n            data.forEach(item => item.items.sort((a, b) => a.sorter - b.sorter))\n\n            const body = configModal._element.querySelector('.config-body')\n            body.innerHTML = ''\n\n            data.forEach(category => {\n                const categoryElement = document.createElement('li')\n                categoryElement.classList.add('list-group-item', 'bg-transparent', 'text-white', 'border-0', 'mb-1', 'rounded-1', 'px-1')\n                categoryElement.innerHTML = `<span class=\"fw-bold btn-dark w-100 d-block p-1 rounded-1 mb-1\">${category.name}</span>`\n\n                const configUlElement = document.createElement('ul')\n                configUlElement.classList.add('list-group', 'bg-transparent', 'overflow-y-auto')\n\n                category.items.forEach(item => {\n                    const configElement = document.createElement('li')\n                    configElement.classList.add('list-group-item', 'd-flex', 'btn-dark', 'text-white', 'border-0', 'rounded-2', 'px-1', 'py-2', 'mb-1')\n                    configElement.innerHTML = `\n                            <img src=\"${item.icon}\" width=\"40\" height=\"40\">\n                            <div class=\"text-start d-flex flex-column ms-2 w-100 text-truncate\">\n                         <span class=\"fw-bold text-uppercase\" style=\"font-size: 0.8rem;\">${item.name}</span>\n\t\t\t\t\t\t<span class=\"fst-italic fw-bold\" style=\"font-size: 0.7rem;\">${item.description || ''}</span>                                \n                            </div>\n                            <div class=\"d-flex flex-column ms-2\">\n                                <span class=\"fst-italic fw-bold text-end text-uppercase text-nowrap\" style=\"font-size: 0.8rem;\">${item.mode}</span>\n                            </div>\n                        </li>\n                    `\n                    configElement.addEventListener('click', e => {\n                        window?.DtSetConfig?.execute(item.id)\n                        configModal.hide()\n                    })\n                    configUlElement.appendChild(configElement)\n                })\n\n                categoryElement.appendChild(configUlElement)\n                body.appendChild(categoryElement)\n            })\n\n            configModal.show()\n        }\n\n        username.value = window?.DtUsername?.get() ?? ''\n        password.value = window?.DtPassword?.get() ?? ''\n\t\tuuid.value = window?.DtUuid?.get() ?? ''\n\n        username.placeholder = 'LBL_USERNAME'.t()\n        password.placeholder = 'LBL_PASSWORD'.t()\n\t\tuuid.placeholder = 'LBL_UUID'.t()\n\n        dtOnNewLogListener()\n        dtVpnStateListener(window?.DtGetVpnState?.execute() ?? 'DISCONNECTED')\n        dtConfigClickListener()\n\t\t\n\t\tconsole.log('Pleno Layouts!馃殌')\n    </script>\n\n</body>\n</html>",
        "type": "HTML",
        "status": "ACTIVE",
        "user_id": "acff48c5-0c40-4493-847a-a48a2807318d"
    },
    {
        "id": 8763,
        "label": "ANDROID WEBVIEW (POR SUA CONTA E RISCO)",
        "name": "APP_SUPPORT_BUTTON",
        "value": null,
        "type": "HTML",
        "status": "ACTIVE",
        "user_id": "acff48c5-0c40-4493-847a-a48a2807318d"
    },
    {
        "id": 8764,
        "label": "PAGINA WEBVIEW (POR SUA CONTA E RISCO)",
        "name": "APP_WEB_VIEW",
        "value": null,
        "type": "HTML",
        "status": "ACTIVE",
        "user_id": "acff48c5-0c40-4493-847a-a48a2807318d"
    }
]